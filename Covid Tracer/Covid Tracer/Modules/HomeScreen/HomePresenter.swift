//
//  HomePresenter.swift
//  Covid Tracer
//
//  Created by Leo Leljak on 23/10/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class HomePresenter {

    // MARK: - Private properties -

    private unowned let view: HomeViewInterface
    private let interactor: HomeInteractorInterface
    private let wireframe: HomeWireframeInterface

    private let searchedCountry = BehaviorRelay<String>(value: "Croatia")
    
    // MARK: - Lifecycle -

    init(view: HomeViewInterface, interactor: HomeInteractorInterface, wireframe: HomeWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension HomePresenter: HomePresenterInterface {

    func configure(with output: Home.ViewOutput) -> Home.ViewInput {
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            self.searchedCountry.accept("Germany")
        }
        
        let covidCases = searchedCountry.debug("covidCases")
            .flatMapLatest { [unowned self] in
                self.interactor.getCovidData(for: $0).asDriver(onErrorDriveWith: .never())
        }
        
        let formattedHeader = formatHeaderData(with: covidCases.asDriver(onErrorDriveWith: .never()))
        let cellItems = getStatisticCellItems(with: covidCases.asDriver(onErrorDriveWith: .never()))
        
        return Home.ViewInput(headerData: formattedHeader, cellItems: cellItems)
    }
}


private extension HomePresenter {
    
    func formatHeaderData(with cases: Driver<[CovidData]>) -> Driver<HeaderData> {
        let dummyHeaderData = HeaderData.init(activeCases: "greska", deathCases: "greska", newCases: "greska")
        
        return cases.map { cases -> HeaderData in
            let countCases = cases.count - 2
            
            guard let lastCase = cases.last else { return dummyHeaderData }
            let activeCases = "\(lastCase.active)"
            let confirmed = "\(lastCase.confirmed - cases[countCases].confirmed)"
            let deathCases = "\(lastCase.deaths - cases[countCases].deaths)"
            
            return HeaderData(activeCases: activeCases, deathCases: deathCases, newCases: confirmed)
        }.asDriver()
    }
    
    func getStatisticCellItems(with cases: Driver<[CovidData]>) -> Driver<[StatisticTableCellItem]> {
        
        cases
            .map { covidData -> [StatisticTableCellItem] in
                var cellItems: [StatisticTableCellItem] = []
                
                StatisticCellType.allCases.forEach { cellItems.append(StatisticTableCellItem(model: covidData, cellType: $0)) }
                return cellItems
            }.asDriver()
        
    }
    
}

